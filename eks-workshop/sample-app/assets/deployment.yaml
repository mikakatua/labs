apiVersion: apps/v1
kind: Deployment
metadata:
  name: assets
  labels:
    app.kubernetes.io/created-by: eks-workshop
    app.kubernetes.io/type: app
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: assets
      app.kubernetes.io/instance: assets
      app.kubernetes.io/component: service
  template:
    metadata:
      labels:
        app.kubernetes.io/name: assets
        app.kubernetes.io/instance: assets
        app.kubernetes.io/component: service
        app.kubernetes.io/created-by: eks-workshop
    spec:
      serviceAccountName: assets
      securityContext: {}
      initContainers:
        - name: copy
          image: "public.ecr.aws/aws-containers/retail-store-sample-assets:0.8.4"
          command:
            ["/bin/sh", "-c", "cp -R /usr/share/nginx/html/assets/* /efsvolume"]
          volumeMounts:
            - name: efsvolume
              mountPath: /efsvolume
      containers:
        - name: assets
          envFrom:
            - configMapRef:
                name: assets
          securityContext:
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: false
          image: "public.ecr.aws/aws-containers/retail-store-sample-assets:0.8.4"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health.html
              port: 8080
            periodSeconds: 3
          resources:
            limits:
              memory: 128Mi
            requests:
              cpu: 128m
              memory: 128Mi
          volumeMounts:
            - name: efsvolume
              mountPath: /usr/share/nginx/html/assets
      volumes:
        - name: efsvolume
          persistentVolumeClaim:
            claimName: efs-claim

